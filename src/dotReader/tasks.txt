commenting
cleaner interface for user
clean the rest of the classes


				/*
				while (myReader.hasNextLine()) {
					ligne = myReader.nextLine();
					if(isWeightedNode(ligne)){
						flagWeighted=true;
						nodes.add(findNodesWeighted(ligne));
					}
					if(isNotWeighted(ligne)){
						nodes.add(findNodes(ligne));
					}
					if(isColoredNode(ligne)){
						flagColored=true;
						Map.Entry<Integer,String> resultat = findColor(ligne);
						colors.put(resultat.getKey(), resultat.getValue());
					}
				}
				*/
                /*
				if(flagColored && flagWeighted){
					System.out.println("This is a colored, weighted and oriented graph.");
					for(Vector<Integer> node: nodes){
						grapheO.addArete(node.get(0), node.get(1), node.get(2));
					}
					Set entrySet = colors.entrySet();
					Iterator it = entrySet.iterator();
					while(it.hasNext()){
						Map.Entry<Integer,String> sommetEtCouleur = (Entry<Integer, String>) it.next();
						grapheO.sommetsOrientés.get(sommetEtCouleur.getKey()).color=sommetEtCouleur.getValue();
					}

				} else if(flagWeighted && !flagColored){
					System.out.println("This is a wieghted oriented graph.");
					for(Vector<Integer> node: nodes){
						grapheO.addArete(node.get(0), node.get(1), node.get(2));
					}
				}
				else if (!flagWeighted && flagColored){
					System.out.println("This is a colored and oriented graph.");
					for(Vector<Integer> node: nodes){
						grapheO.addArete(node.get(0), node.get(1), node.get(2));
					}
					Set entrySet = colors.entrySet();
					Iterator it = entrySet.iterator();
					while(it.hasNext()){
						Map.Entry<Integer,String> sommetEtCouleur = (Entry<Integer, String>) it.next();
						grapheO.sommetsOrientés.get(sommetEtCouleur.getKey()).color=sommetEtCouleur.getValue();
					}
				}
				else{
					System.out.println("This is a simple oriented graph.");
					for(Vector<Integer> node: nodes){
						grapheO.addArete(node.get(0), node.get(1), node.get(2));
					}
				}
				*/
                /*
				if(flagColored && flagWeighted){
					// System.out.println("colored and weighted graph");

					grapheC = new GrapheColoré(nombreSommets+1);
					for(Vector<Integer> node: nodes){
						if(node.get(1)>=0){
							grapheC.addArete(node.get(0), node.get(1), node.get(2));
						}
					}
					Set entrySet = colors.entrySet();
					Iterator it = entrySet.iterator();
					while(it.hasNext()){
						Map.Entry<Integer,String> sommetEtCouleur = (Entry<Integer, String>) it.next();
						grapheC.sommetsColorés.get(sommetEtCouleur.getKey()).color=sommetEtCouleur.getValue();
					}
				} else if(flagWeighted && !flagColored){
					// System.out.println("weighted only graph");
					grapheP = new GraphePonderé(nombreSommets+1);
					for(Vector<Integer> node: nodes){
						grapheP.addArete(node.get(0), node.get(1), node.get(2));
					}
				}
				else if (!flagWeighted && flagColored){
					// System.out.println("colored only graph");
					grapheC = new GrapheColoré(nombreSommets+1);
					for(Vector<Integer> node: nodes){
						grapheC.addArete(node.get(0), node.get(1), node.get(2));
					}
					Set entrySet = colors.entrySet();
					Iterator it = entrySet.iterator();
					while(it.hasNext()){
						Map.Entry<Integer,String> sommetEtCouleur = (Entry<Integer, String>) it.next();
						grapheC.sommetsColorés.get(sommetEtCouleur.getKey()).color=sommetEtCouleur.getValue();
					}
				}
				else{
					// System.out.println("not weighted not colored graph");
					grapheP = new GraphePonderé(nombreSommets+1);
					for(Vector<Integer> node: nodes){
						grapheP.addArete(node.get(0), node.get(1), node.get(2));
					}
				}
				*/
                	public void good(String line){
		Pattern p1 = Pattern.compile("([0-9]{1,}) -[->] ([0-9]{1,}) \\[label=\"([0-9]{1,})\"\\];", Pattern.MULTILINE);
		Matcher matcher = p1.matcher(line);
		if(matcher.matches()){
			System.out.println("good");
			System.out.println(matcher.group(1));
			System.out.println(matcher.group(2));
		}
		else
			System.out.println("not good");
	}